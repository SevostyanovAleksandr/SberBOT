const TelegramBot = require('node-telegram-bot-api');
const token = '7035543762:AAGR1qM7bt73_G4Pd4QZUF-lCGZUAB5xmXA';
const bot = new TelegramBot(token, { polling: true });

const userDataStore = {};
function storeUserData(userId, data) {
    userDataStore[userId] = data;
}

class BotState {
    constructor() {
        this.chatStates = {};
        this.bot = bot;
        this.globalData = null;
        this.globalMediaData = [];
        this.globalState = {
            allSelectedTags: {}

        };
        this.userStates = {}; // Stores user-specific states
    }

  
     validateFIOandEmail(input) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –§–ò–û –∏ –ø–æ—á—Ç—ã
        const regex = /^[^\s]+\s+[^\s]+\s+[^\s]+\s+[^\s]+@[^\s]+$/;
        return regex.test(input);
    }
    async checkUserInChannel(msg) {
        const userId = msg.from.id;
        const channelId =  "-1002196162742" 
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
        const isUserInChannel = await telegramAPI.checkUserInChannel(channelId, userId);
    
        if (isUserInChannel) {
            this.bot.sendMessage(userId, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ªs—É.");
        }
    }
    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const channelId =  "-1002196162742" // '-1002214964299'; // –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ—Ä–∏—â–∞—Ü–∏–∏
        if (msg.text === '/start') {
            this.bot.sendMessage(chatId, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –°–±–µ—Ä–∞—Ö–æ–ª–∫–∞ –Ω–∞ —Å–≤—è–∑–∏! \n–î–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –°–ë–ï–†–∞ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—é–¥–∞ \n‚ö°Ô∏è–í –û–î–ù–û–ú –°–û–û–ë–©–ï–ù–ò–ò!‚ö°Ô∏è —Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ —Å–±–µ—Ä–æ–≤—Å–∫–∞—è –ø–æ—á—Ç–∞. (–î–ó–û —Ç–æ–∂–µ –ø–æ–¥—Ö–æ–¥–∏—Ç) \n–ï—Å–ª–∏ –≤–¥—Ä—É–≥, –±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –≤—ã –Ω–µ —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ, –ø–æ–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ! –ù—É–∂–Ω–æ –≤—Å–µ–≥–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –§–ò–û –∏ –ø–æ—á—Ç–æ–π!');
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –§–ò–û –∏ –ø–æ—á—Ç—ã
            this.chatStates[chatId] = { state: 'awaiting_fio_email' };
            
        } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
            const stateData = this.chatStates[chatId] || {};
            
            if (stateData.state === 'awaiting_fio_email') {
                const text = msg.text;
                if (this.validateFIOandEmail(text)) {
                    stateData.userData = text;
                    stateData.state = null; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    this.bot.sendMessage(chatId, "‚ú® –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –¥–æ–±–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª. \n\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É –≤–∞—Å —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏: \nüì¢ /public - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è \nüìù /create - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è \n‚ÑπÔ∏è /help - —Å–ø—Ä–∞–≤–∫–∞");
                    this.approveUser(chatId, msg); // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
                } else {
                    this.bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –§–ò–û –∏ (–≤–∞—à–∞ –ø–æ—á—Ç–∞)@sberbank.ru.");
                }
            } else {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
                const isUserInChannel = await this.isUserInChannel(channelId, userId);
                console.log(`User ${userId} in channel ${channelId}: ${isUserInChannel}`);
    
                if (isUserInChannel) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –∫–∞–Ω–∞–ª–∞
                    if (msg.text === '/create') {
                        this.createAd(chatId);
                    } else if (msg.text === '/help') {
                        this.chatStates[chatId] = { state: 'awaiting_help' };
                        this.helpUser(chatId);
                    } else if  (msg.text === '/public') {
                        if (!this.globalMediaData || this.globalMediaData.length === 0) {
                            this.bot.sendMessage(chatId, "‚ùóÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ!‚ùóÔ∏è \nC–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æüì©.");
                        } else if (msg.text === '/public') {
                            this.bot.sendMediaGroup(chatId, this.globalMediaData);
                            this.confirmAd(chatId);
                        }

                    } else {
                        this.handleStatefulInput(msg);
                    }
                } else { 
                    this.bot.sendMessage(chatId, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º –∫–∞–Ω–∞–ª–∞, –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –¥–æ–±–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª. \n\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É –≤–∞—Å —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏: \nüì¢ /public - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è \nüìù /create - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è \n‚ÑπÔ∏è /help - —Å–ø—Ä–∞–≤–∫–∞"); 
                }
            }
        }
    }
 
    async isUserInChannel(channelId, userId) {
        try {
            const member = await bot.getChatMember(channelId, userId);
            console.log(`Chat member status: ${member.status}`);
            return ['member', 'administrator', 'creator'].includes(member.status);
        } catch (error) {
            console.error(`Error checking user ${userId} in channel ${channelId}:, error`);
            return false;
        }
    }
    
    handleCallbackQuery(callbackQuery) {
        const message = callbackQuery.message;
        const chatId = message.chat.id;
        const data = callbackQuery.data;

        console.log("–ü–æ–ª—É—á–µ–Ω callback_query:", data);
        console.log("chatId:", chatId);

        if (!this.chatStates[chatId]) {
            this.chatStates[chatId] = {};
        }

        switch (data) {
            case '#–ö—É–ø–ª—é–ü—Ä–æ–¥–∞–º':
            case '#–°–¥–∞–º–°–Ω–∏–º—É':
            case '#–ü—Ä–æ—Å—Ç–æ_–≤–æ–ø—Ä–æ—Å–∏–∫':
            case '#–û—Ç–¥–∞–º_–±–µ—Å–ø–ª–∞—Ç–Ω–æ':
                this.globalData = data;
                this.chatStates[chatId] = { state: 'awaiting_tag' };
                const fakeMsg = { chat: { id: chatId }, text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" };
                this.handleStatefulInput(fakeMsg);
                console.log("–û–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–µ–π—Å:", data);
                break;

            case 'edit':
                this.createAd(chatId);
                console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã edit');
                break;

            case 'publish':
                console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã publish');
                const channelChatId = '-1002196162742';
                bot.sendMediaGroup(channelChatId, this.globalMediaData)
                    .then(() => {
                        bot.editMessageText('–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.', {
                            chat_id: chatId,
                            message_id: message.message_id,
                            reply_markup: { inline_keyboard: [] } // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        });
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error);
                        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.');
                    });
                break;

            default:
                if (data.startsWith('tag_')) {
                    const tag = data.substring(4);
                    console.log("–í—ã–±–æ—Ä —Ç–µ–≥–∞:", tag);
                    this.handleTagSelection(chatId, tag);
                } else {
                    bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
                }
                break;
        }

        bot.answerCallbackQuery(callbackQuery.id).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:', error);
        });
    }

    handleStatefulInput(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;
        const stateData = this.chatStates[chatId] || {};

        if (!stateData || !stateData.state) return;
        console.log(`Handling stateful input for chat ${chatId} with state ${stateData.state}`);
        switch (stateData.state) {

            case 'awaiting_tag':
                if (text === "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å") {
                    stateData.state = 'awaiting_description';
                    bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏ ‚¨áÔ∏è:", this.createTag(chatId)).then((sentMessage) => {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        this.chatStates[chatId].message_id = sentMessage.message_id;
                        console.log(`message_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ ${chatId}: ${sentMessage.message_id}`);
                    }).catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    });
                }
                break;
                case 'awaiting_description':
            stateData.description = msg.text;
            stateData.photos = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            stateData.state = 'awaiting_photo';
            bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æüì∏ (–¥–æ 10 —à—Ç—É–∫). –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–ì–æ—Ç–æ–≤–æ", –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ‚úîÔ∏è:');
            break;
        case 'awaiting_photo':
            if (msg.photo) {
                if (!stateData.photos) stateData.photos = [];
                if (stateData.photos.length < 10) {
                    stateData.photos.push(msg.photo[0].file_id);
                    bot.sendMessage(chatId, `–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (${stateData.photos.length}/10).`);
                } else {
                    bot.sendMessage(chatId, '–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (10).');
                }
            } else if (text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ' && stateData.photos && stateData.photos.length > 0) {
                stateData.state = 'awaiting_price';
                bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏(—á–∏—Å–ª–æ)üí∞:');
            } else {
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ", –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏.');
            }
            break;

        case 'awaiting_price':
            // const price = msg.text;
            const price = parseFloat(msg.text);
     if (!isNaN(price) && price >= 0) {
            const tags = this.globalState.allSelectedTags[chatId]?.join(', ') || '';
            const mediaGroup = stateData.photos.map((photo, index) => ({
                type: 'photo',
                media: photo,
                caption: index === 0 ? `üî•–û–ø–∏—Å–∞–Ω–∏–µ: ${stateData.description}\n\nüí°–û–ø—Ü–∏—è: ${this.globalData}\n\nüí•–¢–µ–≥–∏: ${tags}\n\nüí∞–¶–µ–Ω–∞: ${price}‚ÇΩ\n\nüåü@${msg.from.username}` : ''
            }));
            
            bot.sendMediaGroup(chatId, mediaGroup)
                .then(() => {
                    this.confirmAd(chatId);
                    this.globalMediaData[chatId] = mediaGroup;
                    this.chatStates[chatId].state = null; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                    console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã:', error);
                    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.');
                });
     } else {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã‚ùóÔ∏è.');
         }
     break;
   
        }
    }

    helpUser(chatId) {    
        bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! üåü –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ] –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /create. \n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ‚úçÔ∏è. –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –∞ –Ω–µ –¥–æ–ø–æ–ª–Ω—è—Ç—å –µ–≥–æ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¢–µ–ª–µ–≥—Ä–∞–º–∞üëÄ. \n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ] –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publicüì©. \n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–æ–∑–¥–∞–º –º–∞–∫–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ [–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å]. \n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—åüßë‚Äçüíª!');
    }

    createAd(chatId) {
        const options = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ö—É–ø–ª—é/–ü—Ä–æ–¥–∞–º', callback_data: '#–ö—É–ø–ª—é–ü—Ä–æ–¥–∞–º' }, { text: '–°–¥–∞–º/–°–Ω–∏–º—É', callback_data: '#–°–¥–∞–º–°–Ω–∏–º—É' }],
                    [{ text: '–ü—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–∏–∫', callback_data: '#–ü—Ä–æ—Å—Ç–æ_–≤–æ–ø—Ä–æ—Å–∏–∫' }, { text: '–û—Ç–¥–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data: '#–û—Ç–¥–∞–º_–±–µ—Å–ø–ª–∞—Ç–Ω–æ' }]
                ]
            }
        };
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:', options);
    }

    approveUser(chatId, msg) {
        const userData = this.chatStates[chatId].userData;
        if (userData) {
            const channelChatId = '-1002214964299' ; // ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const userNickname = msg.from.username; // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.sendMessage(channelChatId, `–ñ–µ–ª–∞—é—â–∏–π –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ªüóû: \n${userData} \n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${userNickname}`);
        }
    }

    confirmAd(chatId) {
        const options = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'publish' }, { text: '–ò–∑–º–µ–Ω–∏—Ç—å', callback_data: 'edit' }]
                ]
            }
        };
        bot.sendMessage(chatId, '–í–µ—Ä–Ω–æ –ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?', options);
    }

    createTag(chatId) {
        const tags = ['Apple', '–®–º–æ—Ç–∫–∏', '–ù–æ—É—Ç–±—É–∫', '–§–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ê–≤—Ç–æ', "–ë–∏–ª–µ—Ç", "–î–µ—Ç—è–º", '–ñ–∏–≤–æ—Ç–Ω—ã–µ', '–ú–µ–±–µ–ª—å', '–ú–µ–¥–∏—Ü–∏–Ω–∞', '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–†–∞—Ä–∏—Ç–µ—Ç', '–†–µ–º–æ–Ω—Ç', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–°—Ç—Ä–æ–π–∫–∞", '–¢–µ—Ö–Ω–∏–∫–∞', "–•–∞–ª—è–≤–∞", '–ò–≥—Ä—ã –∏ –∫–æ–Ω—Å–æ–ª—å', "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"];
        
        const selectedTags = this.chatStates[chatId]?.selectedTags || [];
        const rows = [];
        
        for (let i = 0; i < tags.length; i += 4) {
            rows.push(tags.slice(i, i + 4));
        }
        
        return {
            reply_markup: {
                inline_keyboard: rows.map(row => row.map(tag => ({
                    text: selectedTags.includes(tag) ? `‚úÖ ${tag}` : tag,
                    callback_data: `tag_${tag}`
                })))
            }
        };
    }

    handleTagSelection(chatId, tag) {
        try {
            if (!this.chatStates[chatId]) {
                this.chatStates[chatId] = { selectedTags: [] };
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ selectedTags, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!this.chatStates[chatId].selectedTags) {
                this.chatStates[chatId].selectedTags = [];
            }

            const selectedTags = this.chatStates[chatId].selectedTags;
            console.log("–¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏:", selectedTags);
            const index = selectedTags.indexOf(tag);
            if (index > -1) {
                selectedTags.splice(index, 1); // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
            } else {
                selectedTags.push(tag); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –≤ —Å–ø–∏—Å–æ–∫
            }
            const updatedTags = selectedTags.map(tag => `#${tag}`);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
            this.globalState.allSelectedTags[chatId] = [...updatedTags];
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
            console.log("–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è —á–∞—Ç–∞", chatId, ":", this.globalState.allSelectedTags[chatId]);

            if (this.chatStates[chatId].message_id) {
                bot.editMessageReplyMarkup(this.createTag(chatId).reply_markup, {
                    chat_id: chatId,
                    message_id: this.chatStates[chatId].message_id
                }).catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                });
            } else {
                console.error('message_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞:', chatId);
            }
        } catch (error) {
            console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ handleTagSelection:', error);
        }
    }
    
}


const botState = new BotState();

bot.on('message', (msg) => botState.handleMessage(msg));
bot.on('callback_query', (callbackQuery) => botState.handleCallbackQuery(callbackQuery));