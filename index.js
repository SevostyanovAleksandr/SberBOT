const {Telegraf,Scenes,session,Markup} = require('telegraf');
const {BaseScene,Stage} = Scenes;
const token = '7035543762:AAGR1qM7bt73_G4Pd4QZUF-lCGZUAB5xmXA';

const bot = new Telegraf(token);

//C—Ü–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ start
function validateFIOandEmail(input) {
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –§–ò–û –∏ –ø–æ—á—Ç—ã, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–µ–π—Å—è –Ω–∞ @sberbank.ru
    const regex = /^[^\s]+\s+[^\s]+\s+[^\s]+\s+[^\s]+@sberbank\.ru$/;
    return regex.test(input);}

const authScene = new BaseScene("auth")
authScene.enter((ctx) => {
    ctx.reply('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –°–±–µ—Ä–∞—Ö–æ–ª–∫–∞ –Ω–∞ —Å–≤—è–∑–∏‚úÖ! \n–î–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –°–ë–ï–†–∞ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—é–¥–∞ \n‚ö°Ô∏è–í –û–î–ù–û–ú –°–û–û–ë–©–ï–ù–ò–ò!‚ö°Ô∏è —Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ —Å–±–µ—Ä–æ–≤—Å–∫–∞—è –ø–æ—á—Ç–∞ (–î–ó–û —Ç–æ–∂–µ –ø–æ–¥—Ö–æ–¥–∏—Ç). \n–ï—Å–ª–∏ –≤–¥—Ä—É–≥, –±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –≤—ã –Ω–µ —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ, –ø–æ–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ! –ù—É–∂–Ω–æ –≤—Å–µ–≥–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –§–ò–û –∏ –ø–æ—á—Ç–æ–π!');

})
authScene.on('text', (ctx) => {
    const authText = ctx.message.text;
    const channelChatId = '-1002214964299' ; // ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (validateFIOandEmail(authText)){
ctx.reply("‚ú® –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –¥–æ–±–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª. \n\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É –≤–∞—Å —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏:\nüìù /create - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è \n‚ÑπÔ∏è /help - —Å–ø—Ä–∞–≤–∫–∞");
const message = `–ñ–µ–ª–∞—é—â–∏–π –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ªüóû: \n${authText} \n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${ctx.from.username}`;
ctx.telegram.sendMessage(channelChatId, message);
ctx.scene.leave();
}
 else {
   ctx.reply( "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –§–ò–û –∏ (–≤–∞—à–∞ –ø–æ—á—Ç–∞)@sberbank.ru.")
}
});

// –°—Ü–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–ø—Ü–∏–π
const opsciaScene = new BaseScene("opcia")
opsciaScene.enter((ctx) => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:', {
        reply_markup: {
            inline_keyboard: [
                [{
                    text: '–ö—É–ø–ª—é',
                    callback_data: '#–ö—É–ø–ª—é'
                }, {
                    text: '–ü—Ä–æ–¥–∞–º',
                    callback_data: '#–ü—Ä–æ–¥–∞–º'
                }],
                [{
                    text: '–°–¥–∞–º',
                    callback_data: '#–°–¥–∞–º'
                }, {
                    text: '–°–Ω–∏–º—É',
                    callback_data: '#–°–Ω–∏–º—É'
                }],
                [{
                    text: '–ü—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–∏–∫',
                    callback_data: '#–ü—Ä–æ—Å—Ç–æ_–≤–æ–ø—Ä–æ—Å–∏–∫'
                }, {
                    text: '–û—Ç–¥–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
                    callback_data: '#–û—Ç–¥–∞–º_–±–µ—Å–ø–ª–∞—Ç–Ω–æ'
                }]
            ]
        }
    })
})

opsciaScene.action(['#–ö—É–ø–ª—é', '#–ü—Ä–æ–¥–∞–º', '#–°–¥–∞–º', '#–°–Ω–∏–º—É', '#–ü—Ä–æ—Å—Ç–æ_–≤–æ–ø—Ä–æ—Å–∏–∫', '#–û—Ç–¥–∞–º_–±–µ—Å–ø–ª–∞—Ç–Ω–æ' ], (ctx) => {
    const selectedOption = ctx.callbackQuery.data;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é –≤ —Å–µ—Å—Å–∏–∏
    if (!ctx.session.ad) {
        ctx.session.ad = {};
    }
    ctx.session.ad.option = selectedOption;
    ctx.scene.enter('tag');

});

// –°—Ü–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–ø—Ü–∏–π
const opsciaSceneEdit = new BaseScene("opciaEdit")
opsciaSceneEdit.enter((ctx) => {
    ctx.reply('–í—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:', {
        reply_markup: {
            inline_keyboard: [
                [{
                    text: '–ö—É–ø–ª—é',
                    callback_data: '#–ö—É–ø–ª—é'
                }, {
                    text: '–ü—Ä–æ–¥–∞–º',
                    callback_data: '#–ü—Ä–æ–¥–∞–º'
                }],
                [{
                    text: '–°–¥–∞–º',
                    callback_data: '#–°–¥–∞–º'
                }, {
                    text: '–°–Ω–∏–º—É',
                    callback_data: '#–°–Ω–∏–º—É'
                }],
                [{
                    text: '–ü—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–∏–∫',
                    callback_data: '#–ü—Ä–æ—Å—Ç–æ_–≤–æ–ø—Ä–æ—Å–∏–∫'
                }, {
                    text: '–û—Ç–¥–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
                    callback_data: '#–û—Ç–¥–∞–º_–±–µ—Å–ø–ª–∞—Ç–Ω–æ'
                }]
            ]
        }
    })
})

opsciaSceneEdit.action(['#–ö—É–ø–ª—é', '#–ü—Ä–æ–¥–∞–º', '#–°–¥–∞–º', '#–°–Ω–∏–º—É', '#–ü—Ä–æ—Å—Ç–æ_–≤–æ–ø—Ä–æ—Å–∏–∫', '#–û—Ç–¥–∞–º_–±–µ—Å–ø–ª–∞—Ç–Ω–æ'], (ctx) => {
    const selectedOption = ctx.callbackQuery.data;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é –≤ —Å–µ—Å—Å–∏–∏
    if (!ctx.session.ad) {
        ctx.session.ad = {};
    }
    ctx.session.ad.option = selectedOption;
    ctx.scene.enter('publishAd');

});

const tagScene = new BaseScene('tag');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–≥–æ–≤
let tagState = {};
let selectedTags = {};

tagScene.enter((ctx) => {
    const tags = ['Apple', '–®–º–æ—Ç–∫–∏', '–ù–æ—É—Ç–±—É–∫', '–§–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ê–≤—Ç–æ', "–ë–∏–ª–µ—Ç", "–î–µ—Ç—è–º", '–ñ–∏–≤–æ—Ç–Ω—ã–µ', '–ú–µ–±–µ–ª—å', '–ú–µ–¥–∏—Ü–∏–Ω–∞', '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–†–∞—Ä–∏—Ç–µ—Ç', '–†–µ–º–æ–Ω—Ç', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–°—Ç—Ä–æ–π–∫–∞", '–¢–µ—Ö–Ω–∏–∫–∞', "–•–∞–ª—è–≤–∞", '–ò–≥—Ä—ã', "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–≥–æ–≤ –∫–∞–∫ false (–Ω–µ –≤—ã–±—Ä–∞–Ω)
    tags.forEach(tag => {
        tagState[tag] = false;
    });
    sendTagMessage(ctx);

    tagScene.on('text', (ctx) => {
        if (!ctx.session.ad) {
            ctx.session.ad = {};
        }
    
        const selectedTags = Object.keys(tagState).filter(tag => tagState[tag] === true);
        let description = ctx.message.text;
    
        if (description.length > 760) {
            ctx.reply('–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }
    
        if (selectedTags.length === 0 || description.trim() === '') {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');
        } else {
            ctx.session.ad.description = description;
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ü–µ–Ω–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
            return ctx.scene.enter('price');
        }
    })

});

const tagSceneEdit = new BaseScene('tagEdit');

tagSceneEdit.enter((ctx) => {
    const tags = ['Apple', '–®–º–æ—Ç–∫–∏', '–ù–æ—É—Ç–±—É–∫', '–§–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ê–≤—Ç–æ', "–ë–∏–ª–µ—Ç", "–î–µ—Ç—è–º", '–ñ–∏–≤–æ—Ç–Ω—ã–µ', '–ú–µ–±–µ–ª—å', '–ú–µ–¥–∏—Ü–∏–Ω–∞', '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–†–∞—Ä–∏—Ç–µ—Ç', '–†–µ–º–æ–Ω—Ç', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–°—Ç—Ä–æ–π–∫–∞", '–¢–µ—Ö–Ω–∏–∫–∞', "–•–∞–ª—è–≤–∞", '–ò–≥—Ä—ã', "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"];
   
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–≥–æ–≤ –∫–∞–∫ false (–Ω–µ –≤—ã–±—Ä–∞–Ω)
    tags.forEach(tag => {
        tagState[tag] = false;
    });
    sendTagMessage(ctx);

tagSceneEdit.on('text', (ctx) => {
    if (!ctx.session.ad) {
        ctx.session.ad = {};
    }

    const selectedTags = Object.keys(tagState).filter(tag => tagState[tag] === true);
    let description = ctx.message.text;

    if (description.length > 760) {
        ctx.reply('–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
    }

    if (selectedTags.length === 0 || description.trim() === '') {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');
    } else {
        ctx.session.ad.description = description;
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ü–µ–Ω–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
        return ctx.scene.enter('price');
    }
})

});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
tagSceneEdit.action(/tag_(.+)/, async (ctx) => {
    const tag = ctx.match[1];

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–≥–∞
    tagState[tag] = !tagState[tag];

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    if (tagState[tag]) {
        selectedTags[tag] = true;
    } else {
        delete selectedTags[tag];
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const rows = [];
    const tags = Object.keys(tagState);

    for (let i = 0; i < tags.length; i += 4) {
        const row = tags.slice(i, i + 4).map(tag => ({
            text: tagState[tag] ? `‚úÖ ${tag}` : tag,
            callback_data: `tag_${tag}`
        }));
        rows.push(row);
    }

    await ctx.editMessageReplyMarkup({
        inline_keyboard: rows
    });
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
function sendTagMessage(ctx) {
    const rows = [];
    const tags = Object.keys(tagState);

    for (let i = 0; i < tags.length; i += 4) {
        const row = tags.slice(i, i + 4).map(tag => ({
            text: tagState[tag] ? `‚úÖ ${tag}` : tag,
            callback_data: `tag_${tag}`
        }));
        rows.push(row);
    }

    ctx.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏ ‚¨áÔ∏è:', {
        reply_markup: {
            inline_keyboard: rows
        }
    });
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
tagScene.action(/tag_(.+)/, async (ctx) => {
    const tag = ctx.match[1];

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–≥–∞
    tagState[tag] = !tagState[tag];

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    if (tagState[tag]) {
        selectedTags[tag] = true;
    } else {
        delete selectedTags[tag];
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const rows = [];
    const tags = Object.keys(tagState);

    for (let i = 0; i < tags.length; i += 4) {
        const row = tags.slice(i, i + 4).map(tag => ({
            text: tagState[tag] ? `‚úÖ ${tag}` : tag,
            callback_data: `tag_${tag}`
        }));
        rows.push(row);
    }

    await ctx.editMessageReplyMarkup({
        inline_keyboard: rows
    });
});

// –°—Ü–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
const priceScene = new BaseScene('price');
priceScene.enter((ctx) => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏(—á–∏—Å–ª–æ)üí∞:');
});
// priceScene.on('text', (ctx) => {
//     const price = parseFloat(ctx.message.text);

//     if (!isNaN(price) && price > 0) {
//         ctx.session.ad.price = price;
//         return ctx.scene.enter('photoUpload');
//     } else {
//         ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
//     }
// });
priceScene.on('text', (ctx) => {
    const priceInput = ctx.message.text.trim();

    if (priceInput.length <= 15) {
        const price = parseFloat(priceInput);

        if (!isNaN(price) && price > 0) {
            ctx.session.ad.price = price;
            return ctx.scene.enter('photoUpload');
        } else {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
        }
    } else {
        ctx.reply('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤.');
    }
});

// –°—Ü–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
const priceSceneEdid = new BaseScene('priceEdit');
priceSceneEdid.enter((ctx) => {
    ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã.\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏(—á–∏—Å–ª–æ)üí∞:');
});
priceSceneEdid.on('text', (ctx) => {
    const priceInput = ctx.message.text.trim();

    if (priceInput.length <= 15) {
        const price = parseFloat(priceInput);

        if (!isNaN(price) && price > 0) {
            ctx.session.ad.price = price;
            return ctx.scene.enter('photoUpload');
        } else {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
        }
    } else {
        ctx.reply('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤.');
    }
});
// // –°—Ü–µ–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
const photoUploadScene = new BaseScene('photoUpload');

photoUploadScene.enter((ctx) => {
    ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æüì∏ (–¥–æ 10 —à—Ç—É–∫). –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–ì–æ—Ç–æ–≤–æ", –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ‚úîÔ∏è:');
});

photoUploadScene.on('photo', (ctx) => {
    if (!ctx.session.ad) {
        ctx.session.ad = {
            photos: []
        };
    }

    if (!ctx.session.ad.photos) {
        ctx.session.ad.photos = [];
    }

    const photo = ctx.message.photo[0].file_id;
    ctx.session.ad.photos.push(photo);

    if (ctx.session.ad.photos.length >= 10) {
        ctx.reply('–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.');
        ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–≥–æ—Ç–æ–≤–æ", —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.');
    }
});
photoUploadScene.on('text', (ctx) => {
    if (ctx.message.text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ') {

        ctx.scene.enter('publishAd');

    }
})

const photoUploadSceneEdit = new BaseScene('photoUploadEdit');
// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞

photoUploadSceneEdit.enter((ctx) => {
    let isFirstEntry = true;
    if (isFirstEntry) {
        if (ctx.session.ad && ctx.session.ad.photos) {
            ctx.session.ad.photos = []; // –û–±–Ω—É–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
        }
        isFirstEntry = false; // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
    }

    ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æüì∏ (–¥–æ 10 —à—Ç—É–∫). –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–ì–æ—Ç–æ–≤–æ", –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ‚úîÔ∏è:');
})

photoUploadSceneEdit.on('photo', (ctx) => {
    if (!ctx.session.ad) {
        ctx.session.ad = {
            photos: []
        };
    }

    if (!ctx.session.ad.photos) {
        ctx.session.ad.photos = [];
    }


    const photo = ctx.message.photo[0].file_id;
    ctx.session.ad.photos.push(photo);

    if (ctx.session.ad.photos.length >= 10) {
        ctx.reply('–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.');
        ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–≥–æ—Ç–æ–≤–æ", —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.');
    }
});
photoUploadSceneEdit.on('text', (ctx) => {
    if (ctx.message.text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ') {
        ctx.scene.enter('publishAd');

    }
})

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
const publishAdScene = new BaseScene('publishAd');

publishAdScene.enter((ctx) => {

    const allKeysArray = Object.keys(selectedTags);

    // –î–æ–±–∞–≤–ª—è–µ–º # –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞
    const taggedArray = allKeysArray.map(key => `#${key}`);
    const ad = ctx.session.ad;
    if (ctx.session.ad.photos && ctx.session.ad.photos.length > 0) {
        media = ctx.session.ad.photos.map((photoId, index) => ({
            type: 'photo',
            media: photoId,
            caption: index === 0 ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.ad.description} \n–¢–µ–≥–∏: ${taggedArray}\n \n–û–ø—Ü–∏—è: ${ctx.session.ad.option}\n \n–¶–µ–Ω–∞: ${ctx.session.ad.price}‚ÇΩ\n \n–ê–≤—Ç–æ—Ä: @${ctx.from.username} ` : undefined,
        }));
        ctx.telegram.sendMediaGroup(ctx.chat.id, media)
            .then(() => {
                ctx.reply('–í–µ—Ä–Ω–æ –ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µü§î?', {
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                                callback_data: 'publish'
                            }, {
                                text: '–ò–∑–º–µ–Ω–∏—Ç—å',
                                callback_data: 'edit'
                            }]
                        ]
                    }
                })
            })
            .catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã:', error);
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è‚ùó\n–í–∏–¥–∏–º–æ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ /create.');
            });

    } else {
        // media = ` –û–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.ad.description} \n–û–ø—Ü–∏—è: ${ctx.session.ad.option} \n–¢–µ–≥–∏: ${taggedArray} \n–¶–µ–Ω–∞: ${ctx.session.ad.price}‚ÇΩ  \n–ê–≤—Ç–æ—Ä: @${ctx.from.username}`
        media = `–û–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.ad.description} \n–¢–µ–≥–∏: ${taggedArray}\n \n–û–ø—Ü–∏—è: ${ctx.session.ad.option}\n \n–¶–µ–Ω–∞: ${ctx.session.ad.price}‚ÇΩ\n  \n–ê–≤—Ç–æ—Ä: @${ctx.from.username} `,
            ctx.telegram.sendMessage(ctx.chat.id, media)
            .then(() => {
                ctx.reply('–í–µ—Ä–Ω–æ –ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µü§î?', {
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                                callback_data: 'publish'
                            }, {
                                text: '–ò–∑–º–µ–Ω–∏—Ç—å',
                                callback_data: 'edit'
                            }]
                        ]
                    }
                })
            })
            .catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã:', error);
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è‚ùó\n–í–∏–¥–∏–º–æ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ /create.');
            });
    }
})

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ 'publish' –∏ 'edit'
publishAdScene.action(['publish', 'edit'], (ctx) => {
    const creatApr = ctx.callbackQuery.data;

    switch (creatApr) {
        case 'publish':
            // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "publish" –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /publish
            const ad = ctx.session.ad;

            if (!ctx.session.ad.description || !ctx.session.ad.option || !ctx.session.ad.price) {
                return ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.');
            } else {
                const channelChatId = "-1002196162742";
                // const allKeysArray = Object.keys(selectedTags);
                // const taggedArray = allKeysArray.join(', '); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–≥–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
                const allKeysArray = Object.keys(selectedTags);

                // –î–æ–±–∞–≤–ª—è–µ–º # –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞
                const taggedArray = allKeysArray.map(key => `#${key}`);
                if (ctx.session.ad.photos && ctx.session.ad.photos.length > 0) {
                    media = ctx.session.ad.photos.map((photoId, index) => ({
                        type: 'photo',
                        media: photoId,
                        caption: index === 0 ? `${ctx.session.ad.description}\n${taggedArray}\n \n${ctx.session.ad.option} –∑–∞ ${ctx.session.ad.price}‚ÇΩ\n \n@${ctx.from.username} ` : undefined,
                    }));
                    try {
                        ctx.telegram.sendMediaGroup(channelChatId, media);
                        ctx.editMessageReplyMarkup(); // –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        ctx.reply('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!');



                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error);
                        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è‚ùó');
                    }

                } else {
                    const message = `${ctx.session.ad.description}\n${taggedArray}\n \n${ctx.session.ad.option} –∑–∞ ${ctx.session.ad.price}‚ÇΩ\n  \n@${ctx.from.username}`;
                    try {
                        ctx.telegram.sendMessage(channelChatId, message);
                        ctx.editMessageReplyMarkup(); // –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        ctx.reply('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!');


                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error);
                        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è‚ùó');
                    }
                }
            }
            break;
        case 'edit':
            ctx.editMessageReplyMarkup(); 
            ctx.reply('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—åü§î?', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–û–ø—Ü–∏–∏',
                            callback_data: 'opciaEditBut'
                        }, {
                            text: '–¢–µ–≥–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ',
                            callback_data: 'tagEdit'
                        }],
                        [{
                            text: '–¶–µ–Ω–∞',
                            callback_data: 'cenaEdit'
                        }, {
                            text: '–§–æ—Ç–æ',
                            callback_data: 'photoEdit'
                        }]

                    ]
                }
            })
            break;
    }
});
publishAdScene.action('opciaEditBut', (ctx) => {

    // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–û–ø—Ü–∏–∏" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ctx.scene.enter('opciaEdit');
});

publishAdScene.action('tagEdit', (ctx) => {
    // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–¢–µ–≥–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ctx.scene.enter('tagEdit');
    selectedTags = {}
    //console.log(Object.keys(selectedTags))
    
});

publishAdScene.action('cenaEdit', (ctx) => {
    // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–¶–µ–Ω–∞" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ctx.scene.enter('priceEdit');

});

publishAdScene.action('photoEdit', (ctx) => {
    ctx.scene.enter('photoUploadEdit');
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω
const stage = new Stage([authScene, tagSceneEdit, photoUploadSceneEdit, opsciaSceneEdit, priceSceneEdid, photoUploadScene, publishAdScene, priceScene, opsciaScene, tagScene]);
bot.use(session());
bot.use(stage.middleware());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
bot.start((ctx) => {
    ctx.scene.enter('auth');
    
});

const channelChatId = '-1002196162742';

bot.command('create', async (ctx) => {
    const chatMember = await ctx.telegram.getChatMember(channelChatId, ctx.from.id);

    if (chatMember.status === 'member' || chatMember.status === 'administrator' || chatMember.status === 'creator') {
        ctx.session = {}; // –û–±–Ω—É–ª–∏—Ç—å —Å–µ—Å—Å–∏—é
        selectedTags = {}; // –û–±–Ω—É–ª–∏—Ç—å —Ç–µ–≥–∏
        ctx.scene.enter('opcia');
    } else {
        ctx.reply('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º –∫–∞–Ω–∞–ª–∞üò¨. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –¥–æ–±–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª. \n\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É –≤–∞—Å —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏: \nüìù /create - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è \n‚ÑπÔ∏è /help - —Å–ø—Ä–∞–≤–∫–∞');
    }
});

bot.command('help', async (ctx) => {
    const chatMember = await ctx.telegram.getChatMember(channelChatId, ctx.from.id);

    if (chatMember.status === 'member' || chatMember.status === 'administrator' || chatMember.status === 'creator') {
        ctx.reply('–ü—Ä–∏–≤–µ—Ç! üåü –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ] –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /create. \n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ‚úçÔ∏è. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¢–µ–ª–µ–≥—Ä–∞–º–∞üëÄ. \n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–∞–∫–µ—Ç –æ–±—ä—è–ª–≤–µ–Ω–∏—è, —É –≤–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ. \n–ï—Å–ª–∏ –≤—Å–µ –æ–∫ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ [–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å]. \n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—åüßë‚Äçüíª.');
    } else {
        ctx.reply('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º –∫–∞–Ω–∞–ª–∞üò¨. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –¥–æ–±–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª. \n\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É –≤–∞—Å —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏: \nüìù /create - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è \n‚ÑπÔ∏è /help - —Å–ø—Ä–∞–≤–∫–∞');
    }
});
// bot.command('public', async (ctx) => {
//     const chatMember = await ctx.telegram.getChatMember(channelChatId, ctx.from.id);

//     if (chatMember.status === 'member' || chatMember.status === 'administrator' || chatMember.status === 'creator') {
//         const messages = await ctx.telegram.getChatHistory(channelChatId);

//         messages.forEach(async (message) => {
//             if (message.from.id === ctx.from.id) {
//                 if (message.text) {
//                     await ctx.reply(message.text);
//                 } else if (message.photo) {
//                     await ctx.replyWithPhoto({ source: message.photo[0].file_id });
//                 } // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
//             }
//         });

//     } else {
//         ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ /sendPosts –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.');
//     }
// });

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
    .catch((error) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error));